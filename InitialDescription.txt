Database DevOps 
Learn how to extend DevOps practices to databases to prevent the database from being a blocker to DevOps success. 
 
About this course 
To fully benefit from the value of a DevOps approach, it is important to extend the practices you are using for your application code to your database. Failing to involve your DBAs in the development and delivery of database changes will constrain your ability to learn and refine your processes and ultimately lead to your database being a bottleneck in your continuous delivery cycle.  By taking this course, you'll learn everything you need to know about the unique challenges that the database brings and how to overcome these as part of a DevOps implementation. 
 
What you'll learn 
•	Importance of including your database in DevOps processes 
•	Specific database challenges that need to be considered  
•	How to unify processes and improve collaboration between development and DBAs 
•	Source control, Continuous Integration (CI), continuous testing, and continuous deployment for the database 
•	Monitoring databases after releases 
 
Course Syllabus 
 
Introduction to Database DevOps  
Why is it important, what are the specific challenges when it comes to including the database in DevOps practices, and how to facilitate better collaboration between developers and DBAs 
 
Including your database in development practices  
Database source control, Continuous Integration (CI), and continuous testing 
 
Release Management and the database 
Releasing your database in non-Production and Production environments, validating deployments, dealing with database drift, additional database testing,  
 
Monitoring databases after releasing 
Understanding how releases impact database servers and performance, monitoring for database drift, recovering when things go wrong 
 
Advanced topics 
 
 
Prerequisites 
•	A basic understanding of source control, Continuous Integration (CI), continuous testing, and continuous deployment for applications 
•	Some experience working with databases  
 
Detailed Outline  
1.	Introduction to Database DevOps  
	a.	Intro 
	b.	Challenges for database automation 
		i.	Integrity and security of Production data 
		ii.	Production data vs reference data 
		iii.	Test data (in dev and other pre-Production environments) 
		iv.	The DBA (unfamiliar with tools, change) 
		v.	Environment differences 
		vi.	Dependencies (within database and across databases) 
		vii.	Multiple applications accessing the same db 
		viii.	Database drift (aka – Hot fixes directly to Prod) 
		ix.	Maintaining backwards compatibility 
		x.	Recovering from releases (rollback vs roll forward) 
	c.	Options 
		i.	ORM 
		ii.	State-based 
		iii.	Migrations-based 
	d.	State vs Migrations Pros and Cons [Symbol] Hybrid Solution 
	e.	Better collaboration between developers and DBAs 
 
2.	Including your database in development practices  
	a.	Source controlling your database 
		i.	Migration scripts 
		ii.	Schema 
		iii.	Reference data 
	b.	Including your database in Continuous Integration  
	c.	Continuous unit testing for databases (high level – this could be a class in itself, which we could produce) 
 
3.	Release Management and the database 
	a.	Releasing your database in non-Production and Production environments 
		i.	Staging environments 
		ii.	Manual review steps for Production (comparison report, preview script, review warnings) 
	b.	Validating deployments 
	c.	Dealing with database drift 
	d.	Additional database testing 
		i.	Integration testing 
		ii.	Data generation 
 
4.	Monitoring databases after releasing 
	a.	Understanding how releases impact database servers and performance 
	b.	Dealing with database drift 
	c.	Recovering when things go wrong 
		i.	Importance of backups 
		ii.	Rolling forward 
	 
5.	Advanced topics 
	a.	Provisioning dev and test environments  
	b.	Branching and merging database changes 
	c.	Organizing database releases (semantic versioning) 
	d.	Dealing with differences across environments or customer sites 
		i.	User permissions and roles 
		ii.	Customize releases per customer site (SQLCMD variables) 

